{"version":3,"sources":["../../../server/config/express.js"],"names":[],"mappings":";;;;AAIA;;;;;;kBAmBe,UAAS,GAAT,EAAc;AAC3B,MAAI,MAAM,IAAI,GAAJ,CAAQ,KAAR,CAAV;;AAEA,MAAI,QAAQ,aAAR,IAAyB,QAAQ,MAArC,EAA6C;AAC3C,QAAI,GAAJ,CAAQ,kBAAQ,MAAR,CAAe,eAAK,IAAL,CAAU,sBAAO,IAAjB,EAAuB,MAAvB,CAAf,CAAR;AACD;;AAED,MAAI,QAAQ,YAAZ,EAA0B;AACxB,QAAI,GAAJ,CAAQ,4BAAQ,eAAK,IAAL,CAAU,sBAAO,IAAjB,EAAuB,QAAvB,EAAiC,aAAjC,CAAR,CAAR;AACD;;AAED,MAAI,GAAJ,CAAQ,SAAR,EAAmB,eAAK,IAAL,CAAU,sBAAO,IAAjB,EAAuB,QAAvB,CAAnB;AACA,MAAI,GAAJ,CAAQ,kBAAQ,MAAR,CAAe,IAAI,GAAJ,CAAQ,SAAR,CAAf,CAAR;AACA,MAAI,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEA,MAAI,GAAJ,CAAQ,OAAR,EAAiB,sBAAO,IAAP,GAAc,eAA/B;AACA,MAAI,MAAJ,CAAW,MAAX,EAAmB,QAAQ,KAAR,EAAe,UAAlC;AACA,MAAI,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;AACA,MAAI,GAAJ,CAAQ,4BAAR;AACA,MAAI,GAAJ,CAAQ,qBAAW,UAAX,CAAsB,EAAE,UAAU,KAAZ,EAAtB,CAAR;AACA,MAAI,GAAJ,CAAQ,qBAAW,IAAX,EAAR;AACA,MAAI,GAAJ,CAAQ,+BAAR;AACA,MAAI,GAAJ,CAAQ,6BAAR;AACA,MAAI,GAAJ,CAAQ,mBAAS,UAAT,EAAR;;;;;AAKA,MAAI,GAAJ,CAAQ,8BAAQ;AACd,YAAQ,sBAAO,OAAP,CAAe,OADT;AAEd,uBAAmB,IAFL;AAGd,YAAQ,KAHM;AAId,WAAO,IAAI,UAAJ,CAAe;AACpB,0BAAoB,mBAAS,UADT;AAEpB,UAAI;AAFgB,KAAf;AAJO,GAAR,CAAR;;;;;;AAcA,MAAI,QAAQ,MAAR,IAAkB,CAAC,QAAQ,GAAR,CAAY,cAAnC,EAAmD;AACjD,QAAI,GAAJ,CAAQ,qBAAM;AACZ,YAAM;AACJ,iBAAS;AADL,OADM;AAIZ,cAAQ,YAJI;AAKZ,YAAM;AACJ,gBAAQ,QADJ,E;AAEJ,2BAAmB,IAFf;AAGJ,iBAAS;AAHL,OALM;AAUZ,qBAAe;AAVH,KAAN,CAAR;AAYD;;AAED,MAAI,kBAAkB,GAAtB,EAA2B;AACzB,QAAI,GAAJ,CAAQ,QAAQ,oBAAR,EAA8B;AACpC,cAAQ,CACN,cADM,EAEN,cAFM,EAEU,eAFV,EAE2B,eAF3B,EAE4C,eAF5C,EAE6D,gBAF7D,EAGN,eAHM,EAGW,eAHX,EAG4B,gBAH5B,EAG8C,eAH9C,EAG+D,eAH/D;AAD4B,KAA9B,CAAR;AAOD;;AAED,MAAI,kBAAkB,GAAlB,IAAyB,WAAW,GAAxC,EAA6C;AAC3C,QAAI,GAAJ,CAAQ,6BAAR,E;AACD;AACF,C;;AAvFD;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAI,aAAa,qDAAjB","file":"express.js","sourcesContent":["/**\n * Express configuration\n */\n\n'use strict';\n\nimport express from 'express';\nimport favicon from 'serve-favicon';\nimport morgan from 'morgan';\nimport compression from 'compression';\nimport bodyParser from 'body-parser';\nimport methodOverride from 'method-override';\nimport cookieParser from 'cookie-parser';\nimport errorHandler from 'errorhandler';\nimport path from 'path';\nimport lusca from 'lusca';\nimport config from './environment';\nimport passport from 'passport';\nimport session from 'express-session';\nimport connectMongo from 'connect-mongo';\nimport mongoose from 'mongoose';\nvar MongoStore = connectMongo(session);\n\nexport default function(app) {\n  var env = app.get('env');\n\n  if (env === 'development' || env === 'test') {\n    app.use(express.static(path.join(config.root, '.tmp')));\n  }\n\n  if (env === 'production') {\n    app.use(favicon(path.join(config.root, 'client', 'favicon.ico')));\n  }\n\n  app.set('appPath', path.join(config.root, 'client'));\n  app.use(express.static(app.get('appPath')));\n  app.use(morgan('dev'));\n\n  app.set('views', config.root + '/server/views');\n  app.engine('html', require('ejs').renderFile);\n  app.set('view engine', 'html');\n  app.use(compression());\n  app.use(bodyParser.urlencoded({ extended: false }));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n  app.use(cookieParser());\n  app.use(passport.initialize());\n\n  // Persist sessions with MongoStore / sequelizeStore\n  // We need to enable sessions for passport-twitter because it's an\n  // oauth 1.0 strategy, and Lusca depends on sessions\n  app.use(session({\n    secret: config.secrets.session,\n    saveUninitialized: true,\n    resave: false,\n    store: new MongoStore({\n      mongooseConnection: mongoose.connection,\n      db: 'orbit360'\n    })\n  }));\n\n  /**\n   * Lusca - express server security\n   * https://github.com/krakenjs/lusca\n   */\n  if (env !== 'test' && !process.env.SAUCE_USERNAME) {\n    app.use(lusca({\n      csrf: {\n        angular: true\n      },\n      xframe: 'SAMEORIGIN',\n      hsts: {\n        maxAge: 31536000, //1 year, in seconds\n        includeSubDomains: true,\n        preload: true\n      },\n      xssProtection: true\n    }));\n  }\n\n  if ('development' === env) {\n    app.use(require('connect-livereload')({\n      ignore: [\n        /^\\/api\\/(.*)/,\n        /\\.js(\\?.*)?$/, /\\.css(\\?.*)?$/, /\\.svg(\\?.*)?$/, /\\.ico(\\?.*)?$/, /\\.woff(\\?.*)?$/,\n        /\\.png(\\?.*)?$/, /\\.jpg(\\?.*)?$/, /\\.jpeg(\\?.*)?$/, /\\.gif(\\?.*)?$/, /\\.pdf(\\?.*)?$/\n      ]\n    }));\n  }\n\n  if ('development' === env || 'test' === env) {\n    app.use(errorHandler()); // Error handler - has to be last\n  }\n}\n"]}